<?php
/*-------------------------------------------------------+
| Bergwaldprojekt Baumspenden                            |
| Copyright (C) 2010 SYSTOPIA                            |
+--------------------------------------------------------+
| This program is released as free software under the    |
| Affero GPL license. You can redistribute it and/or     |
| modify it under the terms of this license which you    |
| can read by viewing the included agpl.txt or online    |
| at www.gnu.org/licenses/agpl.html. Removal of this     |
| copyright header is strictly prohibited without        |
| written permission from the original author(s).        |
+--------------------------------------------------------*/

/**
 * Implements hook_menu().
 */
function baumspenden_menu()
{
    $items['baumspende'] = [
        'title' => 'Baumspende',
        'page callback' => 'drupal_get_form',
        'page arguments' => ['baumspenden_donation'],
        'access arguments' => ['access baumspenden donation form'],
    ];

    return $items;
}

/**
 * Implements hook_permission().
 */
function baumspenden_permission()
{
    $permissions = [];

    $permissions['access baumspenden donation form'] = [
        'title' => t('Acces Baumspenden donation form'),
        'description' => t('Views and submit Baumspenden donation form'),
    ];

    return $permissions;
}

/**
 * Implements hook_forms().
 */
function baumspenden_forms($form_id, $args)
{
    $forms['baumspenden_donation'] = [
        // This will call: DrupalBaumspendenDonationForm::build().
        'callback' => [
            'DrupalBaumspendenDonationForm',
            'build',
        ],
        // The base_form_id is required when the callback is a static function in
        // a class. This can also be used to keep newer code backwards compatible.
        'base_form_id' => 'baumspenden_donation',
    ];
    return $forms;
}

/**
 * Implements hook_commerce_product_type_info().
 */
function baumspenden_commerce_product_type_info()
{
    $product_types = [];

    // Add a product type for Baumspende donations.
    $product_types[DrupalBaumspendenDonation::PRODUCT_TYPE] = [
        'type' => DrupalBaumspendenDonation::PRODUCT_TYPE,
        'name' => 'Baumspende',
        'description' => 'Baumspende',
    ];

    return $product_types;
}

/**
 * Implements hook_commerce_cart_order_is_cart_alter().
 */
function baumspenden_commerce_cart_order_is_cart_alter(&$is_cart, $order)
{
    if ($order->type == DrupalBaumspendenOrder::ORDER_TYPE) {
        $is_cart = false;
    }
}

/**
 * Implements hook_commerce_cart_order_id().
 */
function baumspenden_commerce_cart_order_id($uid)
{
    // Find an order with a "cart" status but exclude "Baumspenden" order types.
    global $user;
    $status_ids = array_keys(commerce_order_statuses(['cart' => true]));
    $query = new EntityFieldQuery();
    $query
        ->entityCondition('entity_type', 'commerce_order')
        ->entityCondition(
            'bundle',
            DrupalBaumspendenOrder::ORDER_TYPE,
            '!='
        )
        ->propertyCondition('status', $status_ids, 'IN')
        ->propertyOrderBy('order_id', 'DESC');
    if ($user->uid) {
        // For authenticated users, find orders with their uid.
        $query->propertyCondition('uid', $user->uid);
    } elseif (commerce_cart_order_session_exists()) {
        // For anonymous users, find orders stored in their session.
        $query
            ->propertyCondition('uid', 0)
            ->propertyCondition(
                'order_id',
                commerce_cart_order_session_order_ids(),
                'IN'
            );
    }
    $result = $query->execute();
    if (!isset($result['commerce_order'])) {
        // There is no current cart order, create a new cart.
        $commerce_order = commerce_cart_order_new($user->uid);
    } else {
        // There is at least one current cart order, select the latest one.
        $commerce_order = reset($result['commerce_order']);
    }

    commerce_cart_order_session_save($commerce_order->order_id);
    return (int)$commerce_order->order_id;
}

/**
 * Implements hook_commerce_checkout_complete().
 */
function baumspenden_commerce_checkout_complete($commerce_order)
{
    // Process Baumspenden orders
    if ($commerce_order->type == DrupalBaumspendenOrder::ORDER_TYPE) {
        $order = new DrupalBaumspendenOrder($commerce_order->order_id);
        $order->complete();
    }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function baumspenden_field_widget_form_alter(&$element, &$form_state, $context)
{
    // TODO: BIC validation and thus IBAN and BIC field replacement must happen
    //   in a generic form_alter hook implementation, because both fields have
    //   to be replaced. Otherwise, only the BIC field will be replaced and
    //   subsequent replacements will not work.

    // Add custom validation to BIC field in payment transaction forms.
    if (
        $context['instance']['entity_type'] == 'commerce_payment_transaction'
        && $context['instance']['field_name'] == DrupalBaumspendenConfig::FIELD_NAME_BIC
        && $form_state['build_info']['form_id'] != 'field_ui_field_edit_form'
    ) {
        if (!isset($element['value']['#element_validate'])) {
            $element['value']['#element_validate'] = [];
        }
        array_unshift(
            $element['value']['#element_validate'],
            ['DrupalBaumspendenUtils', 'elementValidateBIC']
        );

        if (isset($form_state['triggering_element'])) {
            $iban_field_parents = array_merge(
                $element['#field_parents'],
                [
                    DrupalBaumspendenConfig::FIELD_NAME_IBAN,
                    LANGUAGE_NONE,
                    0,
                    'iban_field',
                ]
            );
            $iban_field = drupal_array_get_nested_value(
                $form_state['complete form'],
                $iban_field_parents
            );
            if ($form_state['triggering_element']['#name'] == $iban_field['#name']) {
                $bic_field_parents = array_merge(
                    $element['#field_parents'],
                    [
                        DrupalBaumspendenConfig::FIELD_NAME_BIC,
                        LANGUAGE_NONE,
                        0,
                        'value',
                    ]
                );
                $bic_field = &drupal_array_get_nested_value(
                    $form_state['complete form'],
                    $bic_field_parents
                );
                DrupalBaumspendenUtils::elementValidateBIC(
                    $bic_field,
                    $form_state,
                    $form_state['complete form']
                );
            }
        }
    }

    // Validate when changing the IBAN.
    if (
        $context['instance']['entity_type'] == 'commerce_payment_transaction'
        && $context['instance']['field_name'] == DrupalBaumspendenConfig::FIELD_NAME_IBAN
        && $form_state['build_info']['form_id'] != 'field_ui_field_edit_form'
    ) {
        if (isset($form_state['complete form'])) {
            $bic_field_parents = array_merge(
                $element['#field_parents'],
                [
                    DrupalBaumspendenConfig::FIELD_NAME_BIC,
                    LANGUAGE_NONE,
                    0,
                    'value',
                ]
            );
            $bic_field = drupal_array_get_nested_value(
                $form_state['complete form'],
                $bic_field_parents
            );
        }
        $element['iban_field']['#ajax'] = [
            'callback' => ['DrupalBaumspendenUtils', 'ajaxCallbackIBAN'],
            'wrapper' => (isset($bic_field['#id']) ? $bic_field['#id'] : 'edit-commerce-cop-sepa-bic'),
            'method' => 'replace',
            'effect' => 'fade',
        ];
    }
}
