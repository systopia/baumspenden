<?php
/*-------------------------------------------------------+
| Bergwaldprojekt Baumspenden                            |
| Copyright (C) 2010 SYSTOPIA                            |
+--------------------------------------------------------+
| This program is released as free software under the    |
| Affero GPL license. You can redistribute it and/or     |
| modify it under the terms of this license which you    |
| can read by viewing the included agpl.txt or online    |
| at www.gnu.org/licenses/agpl.html. Removal of this     |
| copyright header is strictly prohibited without        |
| written permission from the original author(s).        |
+--------------------------------------------------------*/

/**
 * Implements hook_menu().
 */
function baumspenden_menu()
{
    $items['baumspende'] = [
        'title' => 'Baumspende',
        'page callback' => 'drupal_get_form',
        'page arguments' => ['baumspenden_donation'],
        'access arguments' => ['access baumspenden donation form'],
    ];

    return $items;
}

/**
 * Implements hook_permission().
 */
function baumspenden_permission()
{
    $permissions = [];

    $permissions['access baumspenden donation form'] = [
        'title' => t('Acces Baumspenden donation form'),
        'description' => t('Views and submit Baumspenden donation form'),
    ];

    return $permissions;
}

/**
 * Implements hook_forms().
 */
function baumspenden_forms($form_id, $args)
{
    $forms['baumspenden_donation'] = [
        // This will call: DrupalBaumspendenDonationForm::build().
        'callback' => [
            'DrupalBaumspendenDonationForm',
            'build',
        ],
        // The base_form_id is required when the callback is a static function in
        // a class. This can also be used to keep newer code backwards compatible.
        'base_form_id' => 'baumspenden_donation',
    ];
    return $forms;
}

/**
 * Implements hook_commerce_product_type_info().
 */
function baumspenden_commerce_product_type_info()
{
    $product_types = [];

    // Add a product type for Baumspende donations.
    $product_types[DrupalBaumspendenDonation::PRODUCT_TYPE] = [
        'type' => DrupalBaumspendenDonation::PRODUCT_TYPE,
        'name' => 'Baumspende',
        'description' => 'Baumspende',
    ];

    return $product_types;
}

/**
 * Implements hook_commerce_customer_profile_type_info().
 */
function baumspenden_commerce_customer_profile_type_info() {
    $profile_types = array();

    // Add customer profile type for donors.
    $profile_types[DrupalBaumspendenOrder::CUSTOMER_PROFILE_TYPE_DONOR] = array(
        'type' => DrupalBaumspendenOrder::CUSTOMER_PROFILE_TYPE_DONOR,
        'name' => t('Baumspenden donor'),
        'description' => t('Used to collect contact data about the Baumspenden donor.'),
        'help' => '',
        'checkout_pane_weight' => 0,
    );

    // Add customer profile type for presentees.
    $profile_types[DrupalBaumspendenOrder::CUSTOMER_PROFILE_TYPE_PRESENTEE] = array(
        'type' => DrupalBaumspendenOrder::CUSTOMER_PROFILE_TYPE_PRESENTEE,
        'name' => t('Baumspenden presentee'),
        'description' => t('Used to collect contact data about the Baumspenden presentee.'),
        'help' => '',
        'checkout_pane_weight' => 0,
    );

    return $profile_types;
}

/**
 * Implements hook_commerce_cart_order_is_cart_alter().
 */
function baumspenden_commerce_cart_order_is_cart_alter(&$is_cart, $order)
{
    if ($order->type == DrupalBaumspendenOrder::ORDER_TYPE) {
        $is_cart = false;
    }
}

/**
 * Implements hook_commerce_cart_order_id().
 */
function baumspenden_commerce_cart_order_id($uid)
{
    // Find an order with a "cart" status but exclude "Baumspenden" order types.
    global $user;
    $status_ids = array_keys(commerce_order_statuses(['cart' => true]));
    $query = new EntityFieldQuery();
    $query
        ->entityCondition('entity_type', 'commerce_order')
        ->entityCondition(
            'bundle',
            DrupalBaumspendenOrder::ORDER_TYPE,
            '!='
        )
        ->propertyCondition('status', $status_ids, 'IN')
        ->propertyOrderBy('order_id', 'DESC');
    if ($user->uid) {
        // For authenticated users, find orders with their uid.
        $query->propertyCondition('uid', $user->uid);
    } elseif (commerce_cart_order_session_exists()) {
        // For anonymous users, find orders stored in their session.
        $query
            ->propertyCondition('uid', 0)
            ->propertyCondition(
                'order_id',
                commerce_cart_order_session_order_ids(),
                'IN'
            );
    }
    $result = $query->execute();
    if (!isset($result['commerce_order'])) {
        // There is no current cart order, create a new cart.
        $commerce_order = commerce_cart_order_new($user->uid);
    } else {
        // There is at least one current cart order, select the latest one.
        $commerce_order = reset($result['commerce_order']);
    }

    commerce_cart_order_session_save($commerce_order->order_id);
    return (int)$commerce_order->order_id;
}

/**
 * Implements hook_commerce_checkout_complete().
 */
function baumspenden_commerce_checkout_complete($commerce_order)
{
    // Process Baumspenden orders
    if ($commerce_order->type == DrupalBaumspendenOrder::ORDER_TYPE) {
        $order = new DrupalBaumspendenOrder($commerce_order->order_id);
        $order->complete();
    }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function baumspenden_field_widget_form_alter(&$element, &$form_state, $context)
{
    // Add custom validation to BIC field in payment transaction forms.
    if (
        $context['instance']['entity_type'] == 'commerce_payment_transaction'
        && $context['instance']['field_name'] == DrupalBaumspendenConfig::FIELD_NAME_BIC
        && $form_state['build_info']['form_id'] != 'field_ui_field_edit_form'
    ) {
        if (!isset($element['value']['#element_validate'])) {
            $element['value']['#element_validate'] = [];
        }
        array_unshift(
            $element['value']['#element_validate'],
            ['DrupalBaumspendenUtils', 'elementValidateBIC']
        );
    }

    // Validate when changing the IBAN.
    if (
        $context['instance']['entity_type'] == 'commerce_payment_transaction'
        && $context['instance']['field_name'] == DrupalBaumspendenConfig::FIELD_NAME_IBAN
        && $form_state['build_info']['form_id'] != 'field_ui_field_edit_form'
    ) {
        $element['iban_field']['#ajax'] = [
            'callback' => ['DrupalBaumspendenUtils', 'paymentSepaAjaxCallback'],
            'wrapper' => 'payment-details',
            'method' => 'replace',
            'effect' => 'fade',
        ];
        // We need to limit validation to the IBAN and BIC fields using the
        // #limit_validation_errors property. This only works when the element
        // has a #submit callback and is a submitting element. We therefore
        // define our own submit handler for the element, that simply rebuilds
        // the form. @see:DrupalBaumspendenUtils::paymentSepaBicSubmit()
        $element['iban_field']['#limit_validation_errors'] = [$element['#field_parents']];
        $element['iban_field']['#executes_submit_callback'] = true;
        $element['iban_field']['#submit'] = [
            [
                'DrupalBaumspendenUtils',
                'paymentSepaBicSubmit',
            ],
        ];
    }
}
